#!/usr/bin/env python3
"""
Script para testar o sistema de aprova√ß√£o de usu√°rios
"""
import subprocess
import sys
import os

def testar_sistema_aprovacao():
    """Testa o sistema de aprova√ß√£o de usu√°rios"""
    
    print("üîê Testando sistema de aprova√ß√£o de usu√°rios...")
    print("=" * 60)
    
    # Caminho para o Python do ambiente virtual
    venv_python = os.path.join("venv", "Scripts", "python.exe")
    
    if not os.path.exists(venv_python):
        print("‚ùå Ambiente virtual n√£o encontrado!")
        return False
    
    try:
        # Testar se as fun√ß√µes de aprova√ß√£o est√£o funcionando
        codigo_teste = """
import streamlit as st
from auth import verificar_login, verificar_status_aprovado, carregar_usuarios, salvar_usuarios, criar_hash_senha
from datetime import datetime

print("Testando sistema de aprova√ß√£o...")

# Simular usu√°rio logado
st.session_state.usuario_nome = 'admin'

# Teste 1: Verificar se admin est√° aprovado
admin_aprovado = verificar_status_aprovado('admin')
print(f"Admin est√° aprovado: {admin_aprovado}")

# Teste 2: Criar usu√°rio pendente
usuarios = carregar_usuarios()
usuarios['teste_usuario'] = {
    'senha': criar_hash_senha('senha123'),
    'data_criacao': datetime.now().isoformat(),
    'status': 'pendente',
    'email': 'teste@email.com'
}
salvar_usuarios(usuarios)

# Teste 3: Verificar se usu√°rio pendente n√£o est√° aprovado
usuario_pendente = verificar_status_aprovado('teste_usuario')
print(f"Usu√°rio pendente est√° aprovado: {usuario_pendente}")

# Teste 4: Aprovar usu√°rio
usuarios['teste_usuario']['status'] = 'aprovado'
usuarios['teste_usuario']['aprovado_em'] = datetime.now().isoformat()
salvar_usuarios(usuarios)

# Teste 5: Verificar se usu√°rio aprovado est√° aprovado
usuario_aprovado = verificar_status_aprovado('teste_usuario')
print(f"Usu√°rio aprovado est√° aprovado: {usuario_aprovado}")

# Teste 6: Verificar login com usu√°rio aprovado
login_aprovado = verificar_login('teste_usuario', 'senha123')
print(f"Login com usu√°rio aprovado funciona: {login_aprovado}")

# Limpar usu√°rio de teste
del usuarios['teste_usuario']
salvar_usuarios(usuarios)

print("Sistema de aprova√ß√£o funcionando corretamente!")
"""
        
        result = subprocess.run([venv_python, "-c", codigo_teste], 
                              capture_output=True, text=True, check=True, encoding='utf-8')
        
        print(result.stdout)
        print("üéâ Sistema de aprova√ß√£o funcionando perfeitamente!")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro no teste: {e.stderr}")
        return False

if __name__ == "__main__":
    testar_sistema_aprovacao()
