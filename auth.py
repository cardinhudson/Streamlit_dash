"""
M√≥dulo de autentica√ß√£o compartilhado para todas as p√°ginas do Streamlit
"""
import streamlit as st
import hashlib
import json
from datetime import datetime

# Fun√ß√£o para carregar usu√°rios do arquivo JSON
def carregar_usuarios():
    try:
        with open('usuarios.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# Fun√ß√£o para salvar usu√°rios no arquivo JSON
def salvar_usuarios(usuarios):
    with open('usuarios.json', 'w', encoding='utf-8') as f:
        json.dump(usuarios, f, ensure_ascii=False, indent=2)

# Fun√ß√£o para criar hash da senha
def criar_hash_senha(senha):
    return hashlib.sha256(senha.encode()).hexdigest()

# Fun√ß√£o para verificar credenciais
def verificar_login(username, senha):
    usuarios = carregar_usuarios()
    if username in usuarios:
        senha_hash = criar_hash_senha(senha)
        return senha_hash == usuarios[username]['senha']
    return False

# Fun√ß√£o para verificar se o usu√°rio est√° logado
def verificar_sessao():
    if 'usuario_logado' not in st.session_state:
        st.session_state.usuario_logado = False
    if 'usuario_nome' not in st.session_state:
        st.session_state.usuario_nome = None
    return st.session_state.usuario_logado

# Fun√ß√£o para fazer logout
def fazer_logout():
    st.session_state.usuario_logado = False
    st.session_state.usuario_nome = None
    st.rerun()

# Fun√ß√£o para tela de login
def tela_login():
    st.title("üîê Login - Dashboard KE5Z")
    st.markdown("---")
    
    with st.form("login_form"):
        st.subheader("Acesso ao Sistema")
        username = st.text_input("üë§ Usu√°rio:", placeholder="Digite seu usu√°rio")
        senha = st.text_input("üîë Senha:", type="password", placeholder="Digite sua senha")
        
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            submitted = st.form_submit_button("Entrar", use_container_width=True)
        
        if submitted:
            if verificar_login(username, senha):
                st.session_state.usuario_logado = True
                st.session_state.usuario_nome = username
                st.success(f"Bem-vindo, {username}!")
                st.rerun()
            else:
                st.error("‚ùå Usu√°rio ou senha incorretos!")
    
    # Se√ß√£o para administrador adicionar usu√°rios
    st.markdown("---")
    st.subheader("üë®‚Äçüíº √Årea Administrativa")
    
    with st.expander("Adicionar Novo Usu√°rio"):
        with st.form("add_user_form"):
            st.write("**Cadastrar novo usu√°rio:**")
            novo_usuario = st.text_input("Usu√°rio:", key="novo_usuario")
            nova_senha = st.text_input("Senha:", type="password", key="nova_senha")
            confirmar_senha = st.text_input("Confirmar Senha:", type="password", key="confirmar_senha")
            
            if st.form_submit_button("Cadastrar Usu√°rio"):
                if nova_senha == confirmar_senha and novo_usuario and nova_senha:
                    usuarios = carregar_usuarios()
                    if novo_usuario not in usuarios:
                        usuarios[novo_usuario] = {
                            'senha': criar_hash_senha(nova_senha),
                            'data_criacao': datetime.now().isoformat()
                        }
                        salvar_usuarios(usuarios)
                        st.success(f"‚úÖ Usu√°rio '{novo_usuario}' cadastrado com sucesso!")
                    else:
                        st.error("‚ùå Usu√°rio j√° existe!")
                else:
                    st.error("‚ùå Preencha todos os campos e confirme a senha corretamente!")

# Fun√ß√£o para criar usu√°rio administrador inicial
def criar_admin_inicial():
    usuarios = carregar_usuarios()
    if not usuarios:  # Se n√£o h√° usu√°rios, criar admin padr√£o
        usuarios['admin'] = {
            'senha': criar_hash_senha('admin123'),
            'data_criacao': datetime.now().isoformat()
        }
        salvar_usuarios(usuarios)
        st.info("üë§ Usu√°rio administrador criado: **admin** | Senha: **admin123**")
        st.warning("‚ö†Ô∏è **IMPORTANTE**: Altere a senha padr√£o ap√≥s o primeiro login!")

# Fun√ß√£o principal de autentica√ß√£o - deve ser chamada no in√≠cio de cada p√°gina
def verificar_autenticacao():
    """
    Fun√ß√£o principal que deve ser chamada no in√≠cio de cada p√°gina.
    Se o usu√°rio n√£o estiver logado, exibe a tela de login e para a execu√ß√£o.
    """
    # Criar usu√°rio admin inicial se necess√°rio
    criar_admin_inicial()
    
    # Verificar se o usu√°rio est√° logado
    if not verificar_sessao():
        tela_login()
        st.stop()  # Para a execu√ß√£o da p√°gina se n√£o estiver logado
    
    # Se chegou at√© aqui, o usu√°rio est√° logado
    return True

# Fun√ß√£o para exibir header com informa√ß√µes do usu√°rio
def exibir_header_usuario():
    """
    Exibe o header com informa√ß√µes do usu√°rio e bot√£o de logout.
    Deve ser chamada ap√≥s verificar_autenticacao().
    """
    col1, col2, col3 = st.columns([2, 1, 1])
    with col3:
        st.write(f"üë§ Usu√°rio: **{st.session_state.usuario_nome}**")
        if st.button("üö™ Logout", type="secondary"):
            fazer_logout()
