#!/usr/bin/env python3
"""
Script para demonstrar o novo sistema de aprova√ß√£o de usu√°rios
"""
import subprocess
import sys
import os

def demonstrar_sistema_aprovacao():
    """Demonstra o sistema de aprova√ß√£o de usu√°rios"""
    
    print("üéØ Demonstra√ß√£o do Sistema de Aprova√ß√£o de Usu√°rios")
    print("=" * 60)
    
    # Caminho para o Python do ambiente virtual
    venv_python = os.path.join("venv", "Scripts", "python.exe")
    
    if not os.path.exists(venv_python):
        print("‚ùå Ambiente virtual n√£o encontrado!")
        return False
    
    try:
        # Demonstrar o sistema
        codigo_demo = """
import streamlit as st
from auth import carregar_usuarios, salvar_usuarios, criar_hash_senha, verificar_status_aprovado
from datetime import datetime

print("=== DEMONSTRA√á√ÉO DO SISTEMA DE APROVA√á√ÉO ===")
print()

# Simular usu√°rio logado como admin
st.session_state.usuario_nome = 'admin'

# Carregar usu√°rios existentes
usuarios = carregar_usuarios()
print(f"Usu√°rios existentes: {list(usuarios.keys())}")

# Demonstrar cria√ß√£o de usu√°rio pendente
print("\\n1. CRIANDO USU√ÅRIO PENDENTE...")
usuarios['usuario_teste'] = {
    'senha': criar_hash_senha('senha123'),
    'data_criacao': datetime.now().isoformat(),
    'status': 'pendente',
    'email': 'teste@exemplo.com'
}
salvar_usuarios(usuarios)
print("‚úÖ Usu√°rio 'usuario_teste' criado com status PENDENTE")

# Verificar status pendente
status_pendente = verificar_status_aprovado('usuario_teste')
print(f"Status do usu√°rio pendente: {status_pendente}")

# Demonstrar aprova√ß√£o pelo admin
print("\\n2. ADMIN APROVANDO USU√ÅRIO...")
usuarios['usuario_teste']['status'] = 'aprovado'
usuarios['usuario_teste']['aprovado_em'] = datetime.now().isoformat()
salvar_usuarios(usuarios)
print("‚úÖ Usu√°rio 'usuario_teste' aprovado pelo admin")

# Verificar status aprovado
status_aprovado = verificar_status_aprovado('usuario_teste')
print(f"Status do usu√°rio aprovado: {status_aprovado}")

# Demonstrar listagem de usu√°rios
print("\\n3. LISTAGEM DE USU√ÅRIOS:")
for usuario, dados in usuarios.items():
    status_icon = "‚úÖ" if dados.get('status') == 'aprovado' else "‚è≥"
    status_text = "Aprovado" if dados.get('status') == 'aprovado' else "Pendente"
    admin_text = " (Admin)" if usuario == 'admin' else ""
    
    print(f"{status_icon} {usuario}{admin_text} - {status_text}")
    if dados.get('email'):
        print(f"   üìß {dados['email']}")
    print(f"   üìÖ Criado: {dados.get('data_criacao', 'N/A')}")
    if dados.get('aprovado_em'):
        print(f"   ‚úÖ Aprovado: {dados.get('aprovado_em', 'N/A')}")
    print()

# Limpar usu√°rio de teste
print("4. LIMPANDO USU√ÅRIO DE TESTE...")
del usuarios['usuario_teste']
salvar_usuarios(usuarios)
print("‚úÖ Usu√°rio de teste removido")

print("\\nüéâ DEMONSTRA√á√ÉO CONCLU√çDA!")
print("\\nFLUXO DO SISTEMA:")
print("1. Usu√°rio se cadastra ‚Üí Status: PENDENTE")
print("2. Admin visualiza usu√°rios pendentes")
print("3. Admin aprova ou rejeita usu√°rio")
print("4. Usu√°rio aprovado pode fazer login")
print("5. Usu√°rio rejeitado √© removido do sistema")
"""
        
        result = subprocess.run([venv_python, "-c", codigo_demo], 
                              capture_output=True, text=True, check=True, encoding='utf-8')
        
        print(result.stdout)
        print("üéâ Demonstra√ß√£o conclu√≠da com sucesso!")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro na demonstra√ß√£o: {e.stderr}")
        return False

if __name__ == "__main__":
    demonstrar_sistema_aprovacao()
